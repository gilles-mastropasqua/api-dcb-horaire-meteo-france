/**
 * This file was generated by Nexus Schema
 * Do not make changes to this file directly
 */


import type { core } from "nexus"
declare global {
  interface NexusGenCustomInputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, opts?: core.CommonInputFieldConfig<TypeName, FieldName>): void // "JSON";
  }
}
declare global {
  interface NexusGenCustomOutputMethods<TypeName extends string> {
    /**
     * The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
     */
    json<FieldName extends string>(fieldName: FieldName, ...opts: core.ScalarOutSpread<TypeName, FieldName>): void // "JSON";
  }
}


declare global {
  interface NexusGen extends NexusGenTypes {}
}

export interface NexusGenInputs {
}

export interface NexusGenEnums {
}

export interface NexusGenScalars {
  String: string
  Int: number
  Float: number
  Boolean: boolean
  ID: string
  JSON: any
}

export interface NexusGenObjects {
  Poste: { // root type
    altitude?: number | null; // Int
    commune?: string | null; // String
    dateFermeture?: string | null; // String
    dateOuverture?: string | null; // String
    lambX?: number | null; // Int
    lambY?: number | null; // Int
    latitude?: number | null; // Float
    lieuDit?: string | null; // String
    longitude?: number | null; // Float
    nomUsuel?: string | null; // String
    numPoste?: string | null; // String
    posteOuvert?: boolean | null; // Boolean
    typePoste?: number | null; // Int
  }
  Query: {};
}

export interface NexusGenInterfaces {
}

export interface NexusGenUnions {
}

export type NexusGenRootTypes = NexusGenObjects

export type NexusGenAllTypes = NexusGenRootTypes & NexusGenScalars

export interface NexusGenFieldTypes {
  Poste: { // field return type
    altitude: number | null; // Int
    commune: string | null; // String
    dateFermeture: string | null; // String
    dateOuverture: string | null; // String
    lambX: number | null; // Int
    lambY: number | null; // Int
    latitude: number | null; // Float
    lieuDit: string | null; // String
    longitude: number | null; // Float
    nomUsuel: string | null; // String
    numPoste: string | null; // String
    posteOuvert: boolean | null; // Boolean
    typePoste: number | null; // Int
  }
  Query: { // field return type
    countPostes: number | null; // Int
    poste: NexusGenRootTypes['Poste'] | null; // Poste
    postes: Array<NexusGenRootTypes['Poste'] | null> | null; // [Poste]
  }
}

export interface NexusGenFieldTypeNames {
  Poste: { // field return type name
    altitude: 'Int'
    commune: 'String'
    dateFermeture: 'String'
    dateOuverture: 'String'
    lambX: 'Int'
    lambY: 'Int'
    latitude: 'Float'
    lieuDit: 'String'
    longitude: 'Float'
    nomUsuel: 'String'
    numPoste: 'String'
    posteOuvert: 'Boolean'
    typePoste: 'Int'
  }
  Query: { // field return type name
    countPostes: 'Int'
    poste: 'Poste'
    postes: 'Poste'
  }
}

export interface NexusGenArgTypes {
  Query: {
    countPostes: { // args
      filter?: NexusGenScalars['JSON'] | null; // JSON
    }
    poste: { // args
      numPoste?: string | null; // String
    }
    postes: { // args
      filter?: NexusGenScalars['JSON'] | null; // JSON
      skip?: number | null; // Int
      take?: number | null; // Int
    }
  }
}

export interface NexusGenAbstractTypeMembers {
}

export interface NexusGenTypeInterfaces {
}

export type NexusGenObjectNames = keyof NexusGenObjects;

export type NexusGenInputNames = never;

export type NexusGenEnumNames = never;

export type NexusGenInterfaceNames = never;

export type NexusGenScalarNames = keyof NexusGenScalars;

export type NexusGenUnionNames = never;

export type NexusGenObjectsUsingAbstractStrategyIsTypeOf = never;

export type NexusGenAbstractsUsingStrategyResolveType = never;

export type NexusGenFeaturesConfig = {
  abstractTypeStrategies: {
    isTypeOf: false
    resolveType: true
    __typename: false
  }
}

export interface NexusGenTypes {
  context: any;
  inputTypes: NexusGenInputs;
  rootTypes: NexusGenRootTypes;
  inputTypeShapes: NexusGenInputs & NexusGenEnums & NexusGenScalars;
  argTypes: NexusGenArgTypes;
  fieldTypes: NexusGenFieldTypes;
  fieldTypeNames: NexusGenFieldTypeNames;
  allTypes: NexusGenAllTypes;
  typeInterfaces: NexusGenTypeInterfaces;
  objectNames: NexusGenObjectNames;
  inputNames: NexusGenInputNames;
  enumNames: NexusGenEnumNames;
  interfaceNames: NexusGenInterfaceNames;
  scalarNames: NexusGenScalarNames;
  unionNames: NexusGenUnionNames;
  allInputTypes: NexusGenTypes['inputNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['scalarNames'];
  allOutputTypes: NexusGenTypes['objectNames'] | NexusGenTypes['enumNames'] | NexusGenTypes['unionNames'] | NexusGenTypes['interfaceNames'] | NexusGenTypes['scalarNames'];
  allNamedTypes: NexusGenTypes['allInputTypes'] | NexusGenTypes['allOutputTypes']
  abstractTypes: NexusGenTypes['interfaceNames'] | NexusGenTypes['unionNames'];
  abstractTypeMembers: NexusGenAbstractTypeMembers;
  objectsUsingAbstractStrategyIsTypeOf: NexusGenObjectsUsingAbstractStrategyIsTypeOf;
  abstractsUsingStrategyResolveType: NexusGenAbstractsUsingStrategyResolveType;
  features: NexusGenFeaturesConfig;
}


declare global {
  interface NexusGenPluginTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginInputTypeConfig<TypeName extends string> {
  }
  interface NexusGenPluginFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginInputFieldConfig<TypeName extends string, FieldName extends string> {
  }
  interface NexusGenPluginSchemaConfig {
  }
  interface NexusGenPluginArgConfig {
  }
}